// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleApiTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patient Appointment Management API with Authentication")]
    [NUnit.Framework.CategoryAttribute("authentication")]
    public partial class PatientAppointmentManagementAPIWithAuthenticationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "authentication"};
        
#line 1 "PatientAppointmentWithAuth.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Patient Appointment Management API with Authentication", "  As an API consumer\n  I want to create new patient appointments with proper auth" +
                    "entication\n  So that I can securely manage patient data", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new patient appointment with Bearer token authentication")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("auth")]
        public void CreateANewPatientAppointmentWithBearerTokenAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "auth"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new patient appointment with Bearer token authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.Given("the API base URL is \"https://vhapistg.vaxcare.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.And("the API endpoint is \"/api/patients/appointment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("I am authenticated with Bearer token \"YOUR_ACTUAL_BEARER_TOKEN\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table6.AddRow(new string[] {
                            "firstName",
                            "Tammy"});
                table6.AddRow(new string[] {
                            "dob",
                            "1985-10-02 00:00:00.000"});
                table6.AddRow(new string[] {
                            "gender",
                            "0"});
                table6.AddRow(new string[] {
                            "phoneNumber",
                            "1234567890"});
                table6.AddRow(new string[] {
                            "state",
                            "FL"});
                table6.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023151"});
                table6.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table6.AddRow(new string[] {
                            "primaryMemberId",
                            "abc123"});
                table6.AddRow(new string[] {
                            "clinicId",
                            "89534"});
                table6.AddRow(new string[] {
                            "date",
                            "2025-10-02T12:30:00Z"});
                table6.AddRow(new string[] {
                            "providerId",
                            "0"});
                table6.AddRow(new string[] {
                            "visitType",
                            "Well"});
#line 12
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table6, "And ");
#line hidden
#line 26
    testRunner.When("I send a POST request to \"/api/patients/appointment\" with the patient appointment" +
                        " data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("the response time should be less than 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("the patient should have a valid appointment ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("the patient firstName should match \"Tammy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And("the appointment should be scheduled for \"2025-10-02T12:30:00Z\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new patient appointment without authentication should fail")]
        [NUnit.Framework.CategoryAttribute("auth")]
        [NUnit.Framework.CategoryAttribute("negative")]
        public void CreateANewPatientAppointmentWithoutAuthenticationShouldFail()
        {
            string[] tagsOfScenario = new string[] {
                    "auth",
                    "negative"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new patient appointment without authentication should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
    testRunner.Given("the API base URL is \"https://vhapistg.vaxcare.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
    testRunner.And("the API endpoint is \"/api/patients/appointment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
    testRunner.And("I am not authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table7.AddRow(new string[] {
                            "firstName",
                            "John"});
                table7.AddRow(new string[] {
                            "lastName",
                            "Doe"});
                table7.AddRow(new string[] {
                            "dob",
                            "1985-10-02 00:00:00.000"});
                table7.AddRow(new string[] {
                            "gender",
                            "0"});
                table7.AddRow(new string[] {
                            "phoneNumber",
                            "1234567890"});
                table7.AddRow(new string[] {
                            "state",
                            "FL"});
                table7.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023151"});
                table7.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table7.AddRow(new string[] {
                            "primaryMemberId",
                            "abc123"});
                table7.AddRow(new string[] {
                            "clinicId",
                            "89534"});
                table7.AddRow(new string[] {
                            "date",
                            "2025-10-02T12:30:00Z"});
                table7.AddRow(new string[] {
                            "providerId",
                            "0"});
                table7.AddRow(new string[] {
                            "visitType",
                            "Well"});
#line 40
    testRunner.And("I have valid patient appointment data:", ((string)(null)), table7, "And ");
#line hidden
#line 55
    testRunner.When("I send a POST request to \"/api/patients/appointment\" with the patient appointment" +
                        " data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 401 Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("the response should contain an authentication error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new patient appointment with API key authentication")]
        [NUnit.Framework.CategoryAttribute("auth")]
        [NUnit.Framework.CategoryAttribute("api-key")]
        public void CreateANewPatientAppointmentWithAPIKeyAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "auth",
                    "api-key"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new patient appointment with API key authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
    testRunner.Given("the API base URL is \"https://vhapistg.vaxcare.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
    testRunner.And("the API endpoint is \"/api/patients/appointment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("I am authenticated with API key \"YOUR_API_KEY\" in header \"X-API-Key\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table8.AddRow(new string[] {
                            "firstName",
                            "Jane"});
                table8.AddRow(new string[] {
                            "dob",
                            "1990-05-15 00:00:00.000"});
                table8.AddRow(new string[] {
                            "gender",
                            "1"});
                table8.AddRow(new string[] {
                            "phoneNumber",
                            "9876543210"});
                table8.AddRow(new string[] {
                            "state",
                            "CA"});
                table8.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023152"});
                table8.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table8.AddRow(new string[] {
                            "primaryMemberId",
                            "xyz789"});
                table8.AddRow(new string[] {
                            "clinicId",
                            "89535"});
                table8.AddRow(new string[] {
                            "date",
                            "2025-10-03T10:00:00Z"});
                table8.AddRow(new string[] {
                            "providerId",
                            "1"});
                table8.AddRow(new string[] {
                            "visitType",
                            "Checkup"});
#line 64
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table8, "And ");
#line hidden
#line 78
    testRunner.When("I send a POST request to \"/api/patients/appointment\" with the patient appointment" +
                        " data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
    testRunner.And("the response time should be less than 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.And("the patient should have a valid appointment ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new patient appointment with Basic authentication")]
        [NUnit.Framework.CategoryAttribute("auth")]
        [NUnit.Framework.CategoryAttribute("basic")]
        public void CreateANewPatientAppointmentWithBasicAuthentication()
        {
            string[] tagsOfScenario = new string[] {
                    "auth",
                    "basic"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new patient appointment with Basic authentication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 87
    testRunner.Given("the API base URL is \"https://vhapistg.vaxcare.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
    testRunner.And("the API endpoint is \"/api/patients/appointment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.And("I am authenticated with Basic auth username \"testuser\" and password \"testpass\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "firstName",
                            "Bob"});
                table9.AddRow(new string[] {
                            "dob",
                            "1975-12-25 00:00:00.000"});
                table9.AddRow(new string[] {
                            "gender",
                            "0"});
                table9.AddRow(new string[] {
                            "phoneNumber",
                            "5551234567"});
                table9.AddRow(new string[] {
                            "state",
                            "TX"});
                table9.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023153"});
                table9.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table9.AddRow(new string[] {
                            "primaryMemberId",
                            "def456"});
                table9.AddRow(new string[] {
                            "clinicId",
                            "89536"});
                table9.AddRow(new string[] {
                            "date",
                            "2025-10-04T14:00:00Z"});
                table9.AddRow(new string[] {
                            "providerId",
                            "2"});
                table9.AddRow(new string[] {
                            "visitType",
                            "Consultation"});
#line 90
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table9, "And ");
#line hidden
#line 104
    testRunner.When("I send a POST request to \"/api/patients/appointment\" with the patient appointment" +
                        " data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
    testRunner.And("the response time should be less than 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.And("the patient should have a valid appointment ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
