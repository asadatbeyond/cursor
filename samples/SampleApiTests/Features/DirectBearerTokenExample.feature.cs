// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleApiTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Direct Bearer Token Authentication Example")]
    [NUnit.Framework.CategoryAttribute("smoke")]
    [NUnit.Framework.CategoryAttribute("direct-auth")]
    public partial class DirectBearerTokenAuthenticationExampleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "smoke",
                "direct-auth"};
        
#line 1 "DirectBearerTokenExample.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Direct Bearer Token Authentication Example", "  As a developer\n  I want to see how to use Bearer token directly in scenarios\n  " +
                    "So that I can understand the authentication setup", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create patient appointment with direct Bearer token")]
        public void CreatePatientAppointmentWithDirectBearerToken()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create patient appointment with direct Bearer token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("the API base URL is \"https://vhapistg.vaxcare.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And("the API endpoint is \"/api/patients/appointment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.And("I am authenticated with Bearer token \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdW" +
                        "IiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMe" +
                        "KKF2QT4fwpMeJf36POk6yJV_adQssw5c\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table1.AddRow(new string[] {
                            "firstName",
                            "John"});
                table1.AddRow(new string[] {
                            "lastName",
                            "Smith"});
                table1.AddRow(new string[] {
                            "dob",
                            "1985-10-02 00:00:00.000"});
                table1.AddRow(new string[] {
                            "gender",
                            "0"});
                table1.AddRow(new string[] {
                            "phoneNumber",
                            "1234567890"});
                table1.AddRow(new string[] {
                            "state",
                            "FL"});
                table1.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023151"});
                table1.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table1.AddRow(new string[] {
                            "primaryMemberId",
                            "abc123"});
                table1.AddRow(new string[] {
                            "clinicId",
                            "89534"});
                table1.AddRow(new string[] {
                            "date",
                            "2025-10-02T12:30:00Z"});
                table1.AddRow(new string[] {
                            "providerId",
                            "0"});
                table1.AddRow(new string[] {
                            "visitType",
                            "Well"});
#line 11
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table1, "And ");
#line hidden
#line 26
    testRunner.When("I send a POST request to \"/api/patients/appointment\" with the patient appointment" +
                        " data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("the response time should be less than 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
