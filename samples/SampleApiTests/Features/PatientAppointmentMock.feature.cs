// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleApiTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Patient Appointment Management API - Mock Tests")]
    [NUnit.Framework.CategoryAttribute("mock")]
    [NUnit.Framework.CategoryAttribute("smoke")]
    public partial class PatientAppointmentManagementAPI_MockTestsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "mock",
                "smoke"};
        
#line 1 "PatientAppointmentMock.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Patient Appointment Management API - Mock Tests", "  As an API consumer\n  I want to test patient appointment creation with mock resp" +
                    "onses\n  So that I can validate the test framework and response handling", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a new patient appointment with mock API (assumes valid Bearer token)")]
        [NUnit.Framework.CategoryAttribute("mock")]
        [NUnit.Framework.CategoryAttribute("success")]
        public void CreateANewPatientAppointmentWithMockAPIAssumesValidBearerToken()
        {
            string[] tagsOfScenario = new string[] {
                    "mock",
                    "success"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new patient appointment with mock API (assumes valid Bearer token)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.Given("the API base URL is \"https://jsonplaceholder.typicode.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.And("the API endpoint is \"/posts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("I am authenticated with Bearer token \"mock-valid-token-12345\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2.AddRow(new string[] {
                            "firstName",
                            "Alice"});
                table2.AddRow(new string[] {
                            "lastName",
                            "Johnson"});
                table2.AddRow(new string[] {
                            "dob",
                            "1990-05-15 00:00:00.000"});
                table2.AddRow(new string[] {
                            "gender",
                            "1"});
                table2.AddRow(new string[] {
                            "phoneNumber",
                            "5551234567"});
                table2.AddRow(new string[] {
                            "state",
                            "CA"});
                table2.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023152"});
                table2.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table2.AddRow(new string[] {
                            "primaryMemberId",
                            "xyz789"});
                table2.AddRow(new string[] {
                            "clinicId",
                            "89535"});
                table2.AddRow(new string[] {
                            "date",
                            "2025-10-03T10:00:00Z"});
                table2.AddRow(new string[] {
                            "providerId",
                            "1"});
                table2.AddRow(new string[] {
                            "visitType",
                            "Checkup"});
#line 12
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table2, "And ");
#line hidden
#line 27
    testRunner.When("I send a POST request to \"/posts\" with the patient appointment data for mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.And("the response time should be less than 5 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json; charset" +
                        "=utf-8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("the mock API response should contain a valid appointment ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
    testRunner.And("the mock API response should reflect the created patient data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And("the mock API response should have a creation timestamp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And("the appointment should be successfully created via mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create patient appointment with mock API - validate response structure")]
        [NUnit.Framework.CategoryAttribute("mock")]
        [NUnit.Framework.CategoryAttribute("validation")]
        public void CreatePatientAppointmentWithMockAPI_ValidateResponseStructure()
        {
            string[] tagsOfScenario = new string[] {
                    "mock",
                    "validation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create patient appointment with mock API - validate response structure", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
    testRunner.Given("the API base URL is \"https://jsonplaceholder.typicode.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
    testRunner.And("the API endpoint is \"/posts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
    testRunner.And("I am authenticated with Bearer token \"mock-token-67890\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "firstName",
                            "Bob"});
                table3.AddRow(new string[] {
                            "lastName",
                            "Wilson"});
                table3.AddRow(new string[] {
                            "dob",
                            "1985-12-25 00:00:00.000"});
                table3.AddRow(new string[] {
                            "gender",
                            "0"});
                table3.AddRow(new string[] {
                            "phoneNumber",
                            "5559876543"});
                table3.AddRow(new string[] {
                            "state",
                            "TX"});
                table3.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023153"});
                table3.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table3.AddRow(new string[] {
                            "primaryMemberId",
                            "def456"});
                table3.AddRow(new string[] {
                            "clinicId",
                            "89536"});
                table3.AddRow(new string[] {
                            "date",
                            "2025-10-04T14:00:00Z"});
                table3.AddRow(new string[] {
                            "providerId",
                            "2"});
                table3.AddRow(new string[] {
                            "visitType",
                            "Consultation"});
#line 42
    testRunner.And("I have valid patient appointment data:", ((string)(null)), table3, "And ");
#line hidden
#line 57
    testRunner.When("I send a POST request to \"/posts\" with the patient appointment data for mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And("the response time should be less than 3 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json; charset" +
                        "=utf-8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("the appointment should be successfully created via mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("the mock API response should reflect the created patient data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create patient appointment with invalid Bearer token (mock error response)")]
        [NUnit.Framework.CategoryAttribute("mock")]
        [NUnit.Framework.CategoryAttribute("error-handling")]
        public void CreatePatientAppointmentWithInvalidBearerTokenMockErrorResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "mock",
                    "error-handling"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create patient appointment with invalid Bearer token (mock error response)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
    testRunner.Given("the API base URL is \"https://jsonplaceholder.typicode.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
    testRunner.And("the API endpoint is \"/posts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.And("I am not authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "firstName",
                            "Charlie"});
                table4.AddRow(new string[] {
                            "lastName",
                            "Brown"});
                table4.AddRow(new string[] {
                            "dob",
                            "1988-03-10 00:00:00.000"});
                table4.AddRow(new string[] {
                            "gender",
                            "0"});
                table4.AddRow(new string[] {
                            "phoneNumber",
                            "5551112222"});
                table4.AddRow(new string[] {
                            "state",
                            "NY"});
                table4.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023154"});
                table4.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table4.AddRow(new string[] {
                            "primaryMemberId",
                            "ghi789"});
                table4.AddRow(new string[] {
                            "clinicId",
                            "89537"});
                table4.AddRow(new string[] {
                            "date",
                            "2025-10-05T16:00:00Z"});
                table4.AddRow(new string[] {
                            "providerId",
                            "3"});
                table4.AddRow(new string[] {
                            "visitType",
                            "Follow-up"});
#line 69
    testRunner.And("I have valid patient appointment data:", ((string)(null)), table4, "And ");
#line hidden
#line 84
    testRunner.When("I send a POST request to \"/posts\" with the patient appointment data for mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
    testRunner.Then("the response status should be 401 Unauthorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("the response should contain an authentication error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create patient appointment with mock API - performance test")]
        [NUnit.Framework.CategoryAttribute("mock")]
        [NUnit.Framework.CategoryAttribute("performance")]
        public void CreatePatientAppointmentWithMockAPI_PerformanceTest()
        {
            string[] tagsOfScenario = new string[] {
                    "mock",
                    "performance"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create patient appointment with mock API - performance test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 90
    testRunner.Given("the API base URL is \"https://jsonplaceholder.typicode.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
    testRunner.And("the API endpoint is \"/posts\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And("I am authenticated with Bearer token \"performance-test-token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "firstName",
                            "Diana"});
                table5.AddRow(new string[] {
                            "lastName",
                            "Prince"});
                table5.AddRow(new string[] {
                            "dob",
                            "1992-07-20 00:00:00.000"});
                table5.AddRow(new string[] {
                            "gender",
                            "1"});
                table5.AddRow(new string[] {
                            "phoneNumber",
                            "5554445555"});
                table5.AddRow(new string[] {
                            "state",
                            "WA"});
                table5.AddRow(new string[] {
                            "primaryInsuranceId",
                            "1000023155"});
                table5.AddRow(new string[] {
                            "uninsured",
                            "false"});
                table5.AddRow(new string[] {
                            "primaryMemberId",
                            "jkl012"});
                table5.AddRow(new string[] {
                            "clinicId",
                            "89538"});
                table5.AddRow(new string[] {
                            "date",
                            "2025-10-06T09:00:00Z"});
                table5.AddRow(new string[] {
                            "providerId",
                            "4"});
                table5.AddRow(new string[] {
                            "visitType",
                            "Annual"});
#line 93
    testRunner.And("I have valid patient appointment data with random lastName:", ((string)(null)), table5, "And ");
#line hidden
#line 108
    testRunner.When("I send a POST request to \"/posts\" with the patient appointment data for mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
    testRunner.Then("the response status should be 201 Created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.And("the response time should be less than 2 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.And("the response should contain \"Content-Type\" header with \"application/json; charset" +
                        "=utf-8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("the response should contain the created patient appointment data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And("the mock API response should contain a valid appointment ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("the mock API response should reflect the created patient data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("the mock API response should have a creation timestamp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And("the appointment should be successfully created via mock API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
